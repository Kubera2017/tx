// 1. Run:
CREATE INDEX ON :BankAccount(bank)

// 2. Wait util index ONLINE 100%, to check this run:

CALL db.indexes()

// 3. Run:
AGRICULTURAL BANK OF JAPAN
BANK OF AMERICA
AGRICULT
BANK OF JAPAN

MATCH (n:BankAccount) 
USING INDEX n:BankAccount(bank)
WHERE n.bank STARTS WITH "BANK OF JAPAN"
WITH collect(n) AS a
UNWIND a AS A
UNWIND a AS B
WITH A, B
WHERE id(A) <> id(B) AND A.account = B.account
WITH DISTINCT A, B
RETURN count(*)
{id: id(A), account: A.account, bank: A.bank} AS account1,
{id: id(B), account: B.account, bank: B.bank} AS account2
SKIP 0 LIMIT 100

MERGE (A) -[:SAME]-> (B)
collect ({A: id(A), B: id(B)}) AS twins

MATCH (n:BankAccount)
WITH n.account AS account, collect(n) AS twins
WITH account, twins, size(twins) AS s
WHERE s > 1
CALL apoc.cypher.run("
UNWIND twins AS n1
UNWIND twins AS n2
WITH n1, n2
", {twins: twins}) YIELD val
WITH account, val AS twins
UNWIND twins AS twin
WITH account, collect({id: id(twin), bank: twin.bank, account: twin.account}) AS twins
RETURN account, twins 

{id: id(A), account: A.account, bank: A.bank} AS account1,
{id: id(B), account: B.account, bank: B.bank} AS account2
SKIP 0 LIMIT 100

WITH "BANK" AS alphabet
WITH split(alphabet, "") AS letters
UNWIND letters AS l1
WITH l1, letters
UNWIND letters AS l2 
WITH l1, l2, letters
UNWIND letters AS l3 
WITH l1, l2, l3, letters
UNWIND letters AS l4
WITH l1 + l2 + l3 + l4 AS str
